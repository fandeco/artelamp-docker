<?php
include_once dirname(__DIR__, 1) . '/sync/_default.php';

/**
 * Отправка в 1с информации о том что поступила оплата по заказу
 */
class CrontabControllerOrderPaymentSent extends CrontabControllerSync
{
    public $classKey = 'msOrder';
    public $defaultLimit = 10;
    public $defaultOffset = 0;
    /**
     * @var modX
     */
    public $modx;

    protected function prepareListQueryAfterCount(xPDOQuery $c)
    {
        // Передаем чеки которые небыли переды в 1с
        $c->where([
            #'msOrder.id' => 3885,
            'msOrder.track_order' => true,
            'msOrder.order_1c_id:!=' => NULL,
            'msOrder.order_in_1c' => 1,
            'msOrder.order_payment_sent_in_1c' => 0,
            'Log.action' => 'status',
            'Log.entry' => 2,
        ]);
        $c->innerJoin('msOrderLog', 'Log', 'Log.order_id = msOrder.id');
        $c->select('Log.timestamp as payment_date'); // Получаем дату оплаты
        return parent::prepareListQueryAfterCount($c); // TODO: Change the autogenerated stub
    }


    protected function checkOrderTo1c(msOrder $order)
    {
        $response = $this->send('order_exist', [
            'number' => $order->get('num')
        ]);
        if (empty($response['is_exist'])) {
            throw new Exception('order_exist вернул что заказа в 1с нету :' . $order->get('num'));
        }
    }


    /**
     * Метод проверяет что мы прежде не отправляли чек в 1с
     * @param msOrder $order
     * @throws Exception
     */
    protected function operationCheck(msOrder $order)
    {
        $response = $this->send('operation_check', [
            'order_id' => $order->get('order_1c_id'),
        ]);
        if (empty($response['success'])) {
            throw new Exception('operation_check не удалось получить операции:' . $order->get('order_1c_id'));
        }

        if (!empty($response['data'][0]['operation'])) {
            $operation = $response['data'][0]['operation'];
            if (is_array($operation)) {
                foreach ($operation as $item) {
                    $source = mb_strtolower($item['source']);
                    if ($source == 'web') {
                        throw new Exception('Мы уже послали оплату в 1с' . $order->get('order_1c_id'));
                    }
                }
            } else {
                throw new Exception('operation_check вернул что уже есть какие то операции' . $order->get('order_1c_id'));
            }
        }
    }


    protected function sentPayment(msOrder $order)
    {
        // Если нашли заказ то отправляем оплату
        /* @var msOrderAddress $Address */
        $Address = $order->getOne('Address');
        $phone = $this->formatPhone($Address->get('phone'));
        $email = $Address->get('email');

        $contact = null;
        if ($this->is_email($email)) {
            $contact = $email;
        } else if ($phone = $this->check_phone($phone)) {
            $contact = $phone;
        }

        if (!$contact) {
            echo '<pre>';
            print_r('Не удалось получить контакт для заказа ' . $contact);
            die;

        }
        $order_1c_id = $order->get('order_1c_id');
        $params = [
            'order_id' => $order_1c_id,
            'payment_date' => date('c', strtotime($order->get('payment_date'))),
            'contact' => $contact,
            'cost' => $order->get('cost'),
        ];

        // Если заказ найден в 1с то все хорошо, отправляем по нему оплату
        // Отправляем информацию о том что нужно напечатать первый чек
        $response = $this->send('order_payment', $params);
        if (empty($response['success'])) {
            throw new Exception('Произошла ошибка ' . print_r($response, 1));
        }

    }


    /**
     * @param xPDOObject|xPDOSimpleObject|msOrder $order
     * @throws Exception
     */
    protected function prepare($order)
    {

        try {
            // Проверяем что заказ есть в 1с
            $this->checkOrderTo1c($order);

            // Проверяем что ранее небыло печати чека по данному заказу
            $this->operationCheck($order);

            // Проверяем что заказ есть в 1с
            $this->sentPayment($order);

            $order->set('order_payment_sent_in_1c', true);
            $order->save();

            /* @var minishop2 $minishop2 */
            $minishop2 = $this->modx->getService('minishop2');
            // Устанавливаем что отправка прошла успешно
            $minishop2->changeOrderStatus($order->get('id'), 3);

        } catch (Exception $e) {
            $this->modx->log(modX::LOG_LEVEL_ERROR, 'Error: ' . $e->getMessage(), '', __METHOD__, __FILE__, __LINE__);
            echo '<pre>';
            print_r($e->getMessage());
            die;
        }

        return true;
    }


    public function formatPhone($phone)
    {
        #хорошо, спасибо. Такие просто шлем, "как есть", если с 7/8 или +7, или 10 цифр, то приводим к +7
        $len = strlen($phone);
        $first = substr($phone, 0, 1);
        switch ($len) {
            case 11:
                if ($first == 7) {
                    $phone = '+' . $phone;
                } elseif ($first == 8) {
                    $phone = substr($phone, 1);
                    $phone = '+7' . $phone;
                }
                break;
            case 10:
                if ($first != 7) {
                    $phone = '+7' . $phone;
                }
                break;
            default:
                break;
        }
        return $phone;
    }

    function check_phone($phone)
    {
        $phone = preg_replace('#[^0-9]#', '', $phone);
        if (strlen($phone) == 10) {
            $phone = '7' . $phone;
        } else if (strlen($phone) == 11 and substr($phone, 0, 1) == 8) {
            $phone = '7' . substr($phone, 1);
        }
        // Проверка чтобы в начале номера обязательно была 8 или 7
        if (strlen($phone) == 11 and (substr($phone, 0, 1) != 8 and substr($phone, 0, 1) != 7)) {
            return false;
        }

        // Проверка чтобы в начале номера обязательно была 8 или 7
        if (strlen($phone) == 11 and (substr($phone, 1, 1) != 8 and substr($phone, 1, 1) != 9)) {
            return false;
        }

        if (!is_numeric($phone) || strlen($phone) < 11) {
            return false;
        }
        return $phone;
    }

    public function is_email($string)
    {
        return preg_match('/^[a-zA-Z0-9_.+-]+@[a-z0-9_-]+(\.[a-z0-9_-]+)*\.[a-z]{2,6}$/', $string);
    }
}
