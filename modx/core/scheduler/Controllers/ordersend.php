<?php
include_once __DIR__ . '/sync/_default.php';

/**
 * Отправка заказа в 1С
 * TODO связь установлена осталось проверить ввод данных в 1С
 */
class CrontabControllerOrderSend extends CrontabControllerSync
{
    public $classKey = 'msOrder';
    public $defaultLimit = 10;
    public $defaultOffset = 0;
    /**
     * @var modX
     */
    public $modx;

    protected function prepareListQueryAfterCount(xPDOQuery $c)
    {
        $today = new DateTime();
        $today->modify('-2 days');
        $today->setTime(0, 0);
        $w = [
            'is_send_admin' => 0,
            'order_in_1c' => 0,
            'createdon:>' => $today->format('Y-m-d H:i:s'),
            #'partner_id:!=' => 0,
            'create_payment_url_link' => 0,
        ];
        $c->where($w);

        #$c->sortby('id','DESC');
        return parent::prepareListQueryAfterCount($c); // TODO: Change the autogenerated stub
    }


    public $isCoupon = FALSE;
    public $products = NULL;


    protected function complements($product_id, $product_count = 0)
    {
        $isComplement = FALSE;
        $q = $this->modx->newQuery('msProductLink');
        $q->select('master,count,Data.artikul_1c as artikul_1c,Data.weight as weight,Data.price as price');
        $q->where(['slave' => $product_id]);
        $q->innerJoin('msProductData', 'Data', 'Data.id = msProductLink.master');
        if ($q->prepare() && $q->stmt->execute()) {
            while ($row = $q->stmt->fetch(PDO::FETCH_ASSOC)) {
                $isComplement = TRUE;

                $count = $row['count'];
                $product_id = $row['master'];
                $artikul_1c = $row['artikul_1c'];
                $price = $row['price'];


                /* @var msOrderProduct $OrderProduct */
                $OrderProduct = $this->modx->newObject('msOrderProduct');
                $OrderProduct->fromArray([
                    'product_id' => $product_id,
                    'artikul_1c' => $artikul_1c,
                    'price' => $price,
                    'price_discount' => $price,
                    'count' => $product_count * $count,
                ]);


                $this->prepareData($OrderProduct);
            }
        }
        return $isComplement;
    }


    protected function prepareData($product)
    {
        $defective = FALSE;


        $artikul = $product['artikul_1c'] ?: $product['article'] ?: $product['show_artikul'];
        $price = $product['price'];
        $count = $product['count'];


        $data = [
            'count' => (int)$count,
            'price' => (float)$price,
            'artikul' => (string)$artikul,
            'price_discount' => (float)$price,
        ];
        $this->products[] = $data;
    }


    protected function getCostComplect()
    {

    }


    protected $costComplect = '';


    protected function prepare($order)
    {
        /** @var msOrder $order */

        $order_id = $order->get('id');

        /* @var msOrder $order */
//			$this->isCoupon = $order->isCoupon();
        $this->products = NULL;
        $this->costComplect = '';

        $q = $this->modx->newQuery('msOrderProduct');
        $q->setClassAlias('op');
        $q->select('op.*,data.artikul_1c,data.show_artikul,data.article');
        $q->innerJoin('msProductData', 'data', 'data.id = op.product_id');
        $q->where([
            'op.order_id' => $order_id,
        ]);
        if ($q->prepare() && $q->stmt->execute()) {
            while ($row = $q->stmt->fetch(PDO::FETCH_ASSOC)) {
                $this->prepareData($row);
            }
        }
        if (empty($this->products)) {
            $this->service->isEnabledException();
            $this->service->response('Пустой список товаров заказа order_id: ' . $order_id);
        }

        /* @var msOrderAddress $Address */
        $Address = $order->getOne('Address');

        $mobilephone = '';
        $phone = $this->formatPhone($this->modx->util->rawText($Address->get('phone')));
        $phoneFeatures = FALSE;
        if ($Profile = $Address->getOne('UserProfile')) {
            $mobilephone = $Profile->get('mobilephone');
            if (!empty($mobilephone)) {
                if (strripos($phone, $mobilephone) === FALSE) {
                    $phoneFeatures = TRUE;
                }
            }
        }

        $note = ($tmp = $Address->get('comment')) ? $Address->get('comment') : '';
        if ($phoneFeatures) {
            if (!empty(trim($note))) {
                $note .= PHP_EOL;
            }
            $note .= ' Телефон указанный в заказе отличает от пользовательского. Указанный в заказе ' . $phone . '; У пользователя: ' . $mobilephone;
        }
        $promocode = NULL;
        $coupon = $this->modx->newQuery('mspc2CouponOrder');
        $coupon->select('mspc2CouponOrder.code, mspc2CouponOrder.discount, mspc2CouponOrder.discount_amount');
        $coupon->where([
            'mspc2CouponOrder.order' => 2068,
        ]);
        $coupon->innerJoin('mspc2Coupon', 'mspc2Coupon', 'mspc2Coupon.id = mspc2CouponOrder.coupon');
        if ($coupon->prepare() && $coupon->stmt->execute()) {
            $promocode = $coupon->stmt->fetch(PDO::FETCH_ASSOC);
        }
        if (!empty($promocode)) {
            $note .= "\nПРИМЕНЕНТ ПРОМОКОД " . $promocode['code'] . " СКИДКА: " . $promocode['discount_amount'] . " руб. или " . $promocode['discount'];
        }
        $order_from_shop = $order->get('order_from_shop');
        $delivery = (int)$order->get('delivery');
        $payment = (int)$order->get('payment');
        if ($payment === 10) {
            $payment = 2;
        } else {
            $payment = 1;
        }
        $params = [
            'products_list' => $this->products,
            'order_info' => [
                "status" => 1,
                'number' => (string)$order->get('num'),
                "price_type" => 2,
                "delivery_type" => 1,
                "pay_type" => $payment,
                'shop' => "000000023",
                'note' => (string)$note,
                #'note' => ($tmp = $Address->get('comment')) ? $Address->get('comment') : 'ТЕСТОВЫЙ ЗАКАЗ С НОВОГО САЙТА. ОТГРУЖАТЬ НЕ НУЖНО',
                'login' => '',
                'createdon' => date('c', strtotime($order->get('createdon'))),
                'type' => '', // Не используется
                'source' => "artelamp.it", // Не используется
            ],
            'client_info' => [
                'id' => (string)str_replace('+7', '', $phone),
                'name' => (string)$Address->get('receiver'),
                'phone' => (string)$phone,
                'email' => (string)$Address->get('email'),
                'city' => (string)$Address->get('city'),
                'street' => (string)$Address->get('street'),
                'house' => (string)$Address->get('building'),
                'room' => (string)$Address->get('room'),
            ],
        ];
        $path = MODX_CORE_PATH . 'cache/logs/';
        if (!mkdir($path, 0777, TRUE) && !is_dir($path)) {
            throw new \RuntimeException(sprintf('Directory "%s" was not created', $path));
        }
        file_put_contents($path . 'log_' . strtr($order->get('num'), ["\\" => '_', "/" => '_']) . '.json', json_encode($params, 256));
//			if ($isComplement) {
//				$params['order_info']['note'] = '[КОМПЛЕКТЫ: ' . $this->costComplect . ']' . $params['order_info']['note'];
//			}

//			if ($Profile = $Address->getOne('UserProfile')) {
//				// Если пользователь является менеджером
//				$params['client_info']['from_shop'] = $Profile ? $Profile->get('is_manager') : FALSE;
//			}

        #$data = json_encode($params, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);

        #$this->Fandeco1C->loadSync()->fullInfo();
        $exist = json_decode(file_get_contents("https://rest.massive.ru/order_exist?number=" . $params['order_info']['number']), 1);
        if (!$exist['is_exist']) {
            try {
                $response = $this->send('order_send', $params);
            } catch (Exception $e) {
                $response = $e;
            }
            if (array_key_exists('errCode', $response) and $response['errCode'] == 0) {
                if (empty($response['uuid'])) {
                    $this->service->isEnabledException();
                    $this->service->response('Не передан uuid заявки' . print_r($response, 1));
                }
                $order->set('order_1c_id', $response['uuid']);
                $order->set('order_in_1c', 1);
                $order->save();
            } else {
                if (array_key_exists('errCode', $response) and $response['errCode'] == 1 and stripos($response['errMsg'][0], "order exists") !== FALSE) {
                    $order->set('order_1c_id', trim(str_replace('uuid', '', $response['errMsg'][1])));
                    $order->set('order_in_1c', 1);
                    $order->save();
                } else {
                    $this->service->response($response . 'Ошибка отправки заказа order_id' . $params['order_info']['number']);
                }
            }
        } else {
            $order->set('order_1c_id', $exist['uuid']);
            $order->set('order_in_1c', 1);
            $order->save();
        }
        parent::prepare($order); // TODO: Change the autogenerated stub
    }


    public function formatPhone($phone)
    {
        #хорошо, спасибо. Такие просто шлем, "как есть", если с 7/8 или +7, или 10 цифр, то приводим к +7

        $len = strlen($phone);
        $first = substr($phone, 0, 1);
        switch ($len) {
            case 11:
                if ($first == 7) {
                    $phone = '+' . $phone;
                } elseif ($first == 8) {
                    $phone = substr($phone, 1);
                    $phone = '+7' . $phone;
                }
                break;
            case 10:
                if ($first != 7) {
                    $phone = '+7' . $phone;
                }
                break;
            default:
                break;
        }
        return $phone;
    }

}
