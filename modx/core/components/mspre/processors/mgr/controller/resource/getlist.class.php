<?php
include_once dirname(dirname(dirname(__FILE__))) . '/common/trait.php';
require_once(MODX_CORE_PATH . 'model/modx/processors/resource/getlist.class.php');

/**
 * Get a list of modResource
 */
class mspreemodResourceGetListProcessor extends modResourceGetListProcessor
{
    use msPreTrait;
    /* @var mspre $mspre */
    public $mspre = null;
    public $tableFields = array();
    public $loadOptions = false;
    public $loadTv = false;

    public $classKey = 'modResource';
    public $languageTopics = array('default', 'mspre', 'minishop2:product');
    /* @var boolean $isCyclic true вернет индитификаторы товаров без обработки */
    public $isCyclic = false;

    public function initialize()
    {

        // Вернет id ресурсов
        $this->isCyclic = $this->setCheckbox('cyclic', false);
        $this->mspre = $this->modx->getService('mspre', 'mspre', MODX_CORE_PATH . 'components/mspre/model/');
        // Отправлять под запрос если есть опции
        $this->tableFields = $this->mspre->getFieldsTable('resource', 'table', true);

        foreach ($this->tableFields as $tableField) {
            if ($key = prefixTv($tableField)) {
                $this->loadTv = true;
                break;
            }
        }

        return parent::initialize(); // TODO: Change the autogenerated stub
    }


    /**
     * @param xPDOQuery $c
     *
     * @return xPDOQuery
     */
    public function prepareQueryBeforeCount(xPDOQuery $c)
    {
        $c = parent::prepareQueryBeforeCount($c);
        $context = $this->getProperty('context', 'web');
        if ($context != '') {
            $c->where(array(
                "{$this->classKey}.context_key" => $context
            ));
        }

        $template = $this->getProperty('template');
        if ($template != '') {
            $c->where(array(
                "{$this->classKey}.template" => $template
            ));
        }


        $class_key = $this->getProperty('class_key');
        if ($class_key != '') {
            $c->where(array(
                "{$this->classKey}.class_key" => $class_key
            ));
        }

        $published = $this->getProperty('published');
        if ($published != '') {
            $c->where(array(
                "{$this->classKey}.published" => $published
            ));
        }


        $c->select($this->modx->getSelectColumns('modResource', 'modResource'));
        $c->leftJoin('modResource', 'Parent', 'Parent.id = modResource.parent');
        $c->select($this->modx->getSelectColumns('modResource', 'Parent', 'category_', array('pagetitle')));


        $query = trim($this->getProperty('query'));
        if (!empty($query)) {
            if (is_numeric($query)) {
                $c->where(array(
                    'modResource.id' => $query,
                ));
            } else {
                $c->where(array(
                    'modResource.pagetitle:LIKE' => "%{$query}%",
                    'OR:modResource.longtitle:LIKE' => "%{$query}%",
                    'OR:modResource.description:LIKE' => "%{$query}%",
                    'OR:modResource.introtext:LIKE' => "%{$query}%",
                    // TODO отключена по причине невозможности найти страницы родителей так как у них отсутствуют родитель
                    //'OR:Category.pagetitle:LIKE' => "%{$query}%",
                ));
            }
        }

        $this->setStatusFields($c);
        $this->setFilterFields($c);
        $this->filterParent($c);
        $this->filterFavorites($c);
        $this->setSortes($c);
        $this->setFilterAll($c);


        // TODO доработка для быстрого возврата списка ID с товарами
        // Для возврата позийий
        if ($this->isCyclic) {
            // Возвращаем только ID товара
            $c->query['columns'] = array(
                0 => '`modResource`.`id`'
            );
        }
        return $c;
    }

    /**
     * @param xPDOQuery $c
     */
    public function filterParent($c)
    {
        // Parent filter
        $categories = $this->modx->fromJSON($this->getProperty('categories'));
        if ($categories) {

            $parents = array();
            foreach ($categories as $parent) {
                $category = $this->modx->getObject('modResource', $parent);
                $parents[] = $parent;
                $tmp = $this->modx->getChildIds($parent, 10, array('context' => $category->get('context_key')));
                foreach ($tmp as $v) {
                    $parents[] = $v;
                }
            }
            $c->where(array(
                "modResource.parent:IN" => $parents
            ));
        }
    }


    public function prepareRow(xPDOObject $object)
    {
        /* @var modResource $object */
        $charset = $this->modx->getOption('modx_charset', null, 'UTF-8');
        $array = $object->toArray();
        $array['pagetitle'] = htmlentities($array['pagetitle'], ENT_COMPAT, $charset);

        $array['actions'] = array();

        $this->modx->getContext($array['context_key']);
        $array['preview_url'] = $this->modx->makeUrl($array['id'], $array['context_key']);

        $array['category_name'] = $array['category_pagetitle'];

        // View
        if (!empty($array['preview_url'])) {
            $array['actions'][] = array(
                'cls' => '',
                'icon' => 'icon icon-eye',
                'title' => $this->modx->lexicon('mspe_product_view'),
                'action' => 'viewProduct',
                'button' => false,
                'menu' => true,
            );
        }

        // Edit
        $array['actions'][] = array(
            'cls' => '',
            'icon' => 'icon icon-edit',
            'title' => $this->modx->lexicon('mspe_product_edit'),
            'action' => 'editProduct',
            'button' => false,
            'menu' => true,
        );
        // Duplicate
        $array['actions'][] = array(
            'cls' => '',
            'icon' => 'icon icon-files-o',
            'title' => $this->modx->lexicon('mspe_product_duplicate'),
            'action' => 'duplicateProduct',
            'button' => false,
            'menu' => true,
        );
        // Publish
        if (!$array['published']) {
            $array['actions'][] = array(
                'cls' => '',
                'icon' => 'icon icon-power-off action-green',
                'title' => $this->modx->lexicon('mspe_product_publish'),
                'multiple' => $this->modx->lexicon('mspe_product_publish'),
                'action' => 'publishProduct',
                'button' => false,
                'menu' => true,
            );
        } else {
            $array['actions'][] = array(
                'cls' => '',
                'icon' => 'icon icon-power-off action-gray',
                'title' => $this->modx->lexicon('mspe_product_unpublish'),
                'multiple' => $this->modx->lexicon('mspe_product_unpublish'),
                'action' => 'unpublishProduct',
                'button' => false,
                'menu' => true,
            );
        }
        // Show in tree
        if (!$array['show_in_tree']) {
            $array['actions'][] = array(
                'cls' => '',
                'icon' => 'icon icon-plus',
                'title' => $this->modx->lexicon('mspe_product_show_in_tree'),
                'multiple' => $this->modx->lexicon('mspe_product_show_in_tree'),
                'action' => 'showProduct',
                'button' => false,
                'menu' => true,
            );
        } else {
            $array['actions'][] = array(
                'cls' => '',
                'icon' => 'icon icon-minus',
                'title' => $this->modx->lexicon('mspe_product_hide_in_tree'),
                'multiple' => $this->modx->lexicon('mspe_product_hide_in_tree'),
                'action' => 'hideProduct',
                'button' => false,
                'menu' => true,
            );
        }
        // Delete
        if (!$array['deleted']) {
            $array['actions'][] = array(
                'cls' => '',
                'icon' => 'icon icon-trash-o action-red',
                'title' => $this->modx->lexicon('mspe_product_delete'),
                'multiple' => $this->modx->lexicon('mspe_product_delete'),
                'action' => 'deleteProduct',
                'button' => false,
                'menu' => true,
            );
        } else {
            $array['actions'][] = array(
                'cls' => '',
                'icon' => 'icon icon-undo action-green',
                'title' => $this->modx->lexicon('mspe_product_undelete'),
                'multiple' => $this->modx->lexicon('mspe_product_undelete'),
                'action' => 'undeleteProduct',
                'button' => true,
                'menu' => true,
            );
        }
        // Menu
        $array['actions'][] = array(
            'cls' => '',
            'icon' => 'icon icon-cog actions-menu',
            'menu' => false,
            'button' => true,
            'action' => 'showMenu',
            'type' => 'menu',
        );
        return $array;
    }


    /**
     * @param array $data
     *
     * @return array
     */
    public function iterate(array $data)
    {
        if ($this->isCyclic) {
            if (isset($data['results']) and count($data['results'])) {
                $ids = array_column($data['results'], 'id');
                $this->mspre->setCacheManager($ids);
                $do_not_return = $this->setCheckbox('do_not_return');
                if ($do_not_return) {
                    return array();
                }
                return $ids;
            }
        }
        $list = parent::iterate($data);
        return $this->iterateResults($list);
    }

    /**
     * @param array $array
     * @param bool $count
     *
     * @return string
     */
    public function outputArray(array $array, $count = false)
    {
        if ($count === false) {
            $count = count($array);
        }
        $data = array(
            'success' => true,
            'results' => $array,
            'total' => $count,
            'total_info' => (string)$count,
        );
        return json_encode($data);
    }

}

return 'mspreemodResourceGetListProcessor';