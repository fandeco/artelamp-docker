<?php

class msOptionGetListProcessor extends modObjectGetListProcessor
{
    public $classKey = 'msOption';
    public $defaultSortField = 'key';
    public $defaultSortDirection = 'ASC';

    /* @var null|array $parents */
    public $parents = null;

    public function initialize()
    {
        $this->modx->getService('minishop2', 'miniShop2', MODX_CORE_PATH . 'components/minishop2/model/');
        
        $this->modx->lexicon->load('minishop2:product');
        return parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * @param xPDOQuery $c
     *
     * @return xPDOQuery
     */
    public function prepareQueryBeforeCount(xPDOQuery $c)
    {

        $c->select($this->modx->getSelectColumns('msOption', 'msOption', '', array('key', 'caption'), false));
        #$c->select($this->modx->getSelectColumns('msOption', 'msOption','', array('key','caption'), true));
        if ($query = $this->getProperty('query')) {
            $c->where(array(
                'caption:LIKE' => "%$query%",
                'OR:key:LIKE' => "%$query%",
            ));
        }
        return $c;
    }


    public function getData()
    {
        $data = array();
        $limit = intval($this->getProperty('limit'));
        $start = intval($this->getProperty('start'));

        /* query for chunks */
        $c = $this->modx->newQuery($this->classKey);
        $c = $this->prepareQueryBeforeCount($c);
        $data['total'] = $this->modx->getCount($this->classKey, $c);
        $c = $this->prepareQueryAfterCount($c);

        $sortClassKey = $this->getSortClassKey();
        $sortKey = $this->modx->getSelectColumns($sortClassKey, $this->getProperty('sortAlias', $sortClassKey), '', array($this->getProperty('sort')));
        if (empty($sortKey)) $sortKey = $this->getProperty('sort');
        $c->sortby($sortKey, $this->getProperty('dir'));


        if ($start == 0) {
            $limit = $limit - 3;
        }

        if ($limit > 0) {
            $c->limit($limit, $start);
        }

        $rows = array();
        if ($start == 0) {
            $fieldsMeta = $this->modx->getFieldMeta('msProductData');
            foreach ($fieldsMeta as $key => $field) {
                if (strtolower($field['phptype']) === 'json') {
                    $rows[] = array(
                        'key' => $key,
                        'caption' => $this->modx->lexicon('ms2_product_'.$key),
                    );
                }
            }
        }

        if ($c->prepare() && $c->stmt->execute()) {
            while ($row = $c->stmt->fetch(PDO::FETCH_ASSOC)) {
                $rows[] = $row;
            }
        }
        $data['results'] = $rows;
        return $data;
    }

    /**
     * Iterate across the data
     *
     * @param array $data
     * @return array
     */
    public function iterate(array $data)
    {
        $list = array();
        $list = $this->beforeIteration($list);
        $this->currentIndex = 0;

        $results = $data['results'];
        $query = !empty($this->getProperty('query')) ? $this->getProperty('query') : false;
        foreach ($results as $objectArray) {
            if ($query) {
                if (strripos($objectArray['key'], $query) === false and strripos($objectArray['caption'], $query) === false) {
                    continue;
                }
            }

            $list[] = $objectArray;
            $this->currentIndex++;
        }
        $list = $this->afterIteration($list);
        return $list;
    }


    public function afterIteration(array $list)
    {
        return parent::afterIteration($list); // TODO: Change the autogenerated stub
    }
}

return 'msOptionGetListProcessor';