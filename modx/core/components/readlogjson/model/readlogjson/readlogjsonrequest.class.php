<?php

class ReadLogJsonRequest extends xPDOSimpleObject
{
    protected $fieldsJson = ['request', 'response'];

    #protected $fieldsJson = ['params', 'request', 'response', 'errors'];

    public function save($cacheFlag = null)
    {
        if ($this->isNew()) {
            if (empty($this->get('createdon'))) {
                $this->set('createdon', time());
            }
        } else {
            $this->set('updatedon', time());
        }

        return parent::save($cacheFlag); // TODO: Change the autogenerated stub
    }

    public function fieldsJson()
    {
        return $this->fieldsJson;
    }


    /**
     * Return the response
     * @return array
     */
    public function cleanup()
    {
        $array = $this->toArray();
        $fields = $this->fieldsJson();
        foreach ($fields as $f) {
            $array[$f] = $this->getJson($this->get($f));
        }
        return $array;
    }

    /**
     * Return the response
     * @return array
     */
    public function cleanupField($field)
    {
        return $this->getJson($this->get($field));
    }

    /**
     * @param array $array
     * @return false|string
     */
    public function getJson($array = [], $json_response = true)
    {
        $response = [];
        if (!empty($array) and is_array($array)) {
            $response = json_encode($array, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
        } else if ($json_response) {
            $response = '{}';
        }
        return $response;
    }

    public function clear(array $data)
    {
        return $this->getJson($data);
    }


    public function processed()
    {
        $this->set('processed', true);
        $this->set('processed_in', time());
        return $this->save();
    }


}
