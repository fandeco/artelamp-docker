<?php
	ini_set('display_errors', 1);
	if (file_exists(MODX_CORE_PATH . 'components/extraext/model/extraext.include.php')) {
		include_once MODX_CORE_PATH . 'components/extraext/model/extraext.include.php';
	}
	if (class_exists('extraExtManagerController')) {
		//Основной контроллер
		class ExtraextMgrPreviewManagerController extends extraExtManagerController
		{

			public $componentName = 'extraext'; // название компонента так как называется его папка в assets/components/
			public $devMode = TRUE;
			public $noManagerMode = TRUE;

			public function initialize()
			{
				parent::initialize(); // TODO: Change the autogenerated stub
				if (!empty($_REQUEST['p'])) {
					$path = realpath(MODX_BASE_PATH . rtrim($_REQUEST['p'], '/'));
				}
				if (!file_exists($path)) {
					$path = realpath(MODX_BASE_PATH . 'manager/templates/default/images/restyle/nopreview.jpg');
				}
				$this->path = $path;

				$this->mime = mime_content_type($this->path);
				$this->name = basename($this->path);
				$_tmp = explode('.', basename($this->path));
				$this->ext = mb_strtolower(end($_tmp));
				$this->size = filesize($this->path);
				if (strpos($this->mime, 'text') !== FALSE) {
					$this->type = 'text';
				} elseif (strpos($this->mime, 'application') !== FALSE) {
					$this->type = 'application';
				} elseif (strpos($this->mime, 'video') !== FALSE) {
					$this->type = 'video';
				} elseif (strpos($this->mime, 'audio') !== FALSE) {
					$this->type = 'audio';
				} elseif (strpos($this->mime, 'image') !== FALSE) {
					$this->type = 'image';
				} else {
					$this->type = 'bin';
				}


			}

			public function getPageTitle()
			{

				return $this->name;
			}

			public function ext2lang($ext)
			{
				switch (mb_strtolower($ext)) {
					case 'tpl':
						return 'html';
					case 'map':
						return 'json';
					default:
						return $ext;
				}
			}

			public function loadCustomCssJs()
			{
				header('Content-Description: File preview');
				if (in_array($this->type, ['video', 'audio', 'bin'])) {
					if (ob_get_level()) {
						ob_end_clean();
					}
					header('Content-Type: ' . $this->mime . '; charset=utf-8');
					header('Content-Transfer-Encoding: binary');
					header('Content-disposition: inline; filename="' . $this->name . '"');
					header('Expires: 0');
					header('Pragma: public');
					header('Content-Length: ' . $this->size);
					readfile($this->path);
				} elseif ($this->type == 'text') {
					$content = file_get_contents($this->path);
					$content = htmlspecialchars($content);
					$this->addHtml('<style>
						body,html{
						padding: 0;
						margin: 0;
						}
					</style>');
					$this->addHtml('<title>' . $this->name . '</title>');
					$lang = $this->ext2lang($this->ext);
					$this->addHtml(<<<HTML
<pre>
	<code  class="extraExt language-{$lang}">
	{$content}
	</code>
</pre>
HTML);
					$this->addHtml(<<<HTML
<script>
document.addEventListener('DOMContentLoaded', (event) => {
  document.querySelectorAll('pre code').forEach((block) => {
    hljs.highlightBlock(block);
  });
});
</script>
HTML);
				} elseif ($this->type == 'image') {
					$this->addHtml('<style>
						html{
							padding: 0;
							margin: 0;
						}
					</style>');
					$this->addHtml('<title>' . $this->name . '</title>');
					$content = file_get_contents($this->path);
					if (strpos($this->mime, 'svg') === FALSE) {
						[$width, $height, $type, $attr] = getimagesize($this->path);
						$width += 'px';
						$path = 'data:' . $type . ';base64,' . base64_encode($content);

						$this->addHtml("
							<img src='$path' style='min-width: 100%;width: {$width}'>
						");
					} else {
						$this->addHtml($content);
					}

				} elseif ($this->type == 'application') {
					$this->addHtml('<style>
						html{
							padding: 0;
							margin: 0;
						}
					</style>');
					$this->addHtml('<title>' . $this->name . '</title>');
					$path = '/manager/templates/default/images/restyle/nopreview.jpg';
					$this->addHtml("
					<img src='$path' style='max-height: 100%; max-width: 100%;height: 100%;'>
					");
				}

			}
		}
	} else {
		//Запасной контроллер
		class ExtraextMgrPreviewManagerController extends modExtraManagerController
		{
			public function getPageTitle()
			{
				return 'install Error';
			}

			public function loadCustomCssJs()
			{
				$this->addHtml("
					<H1 class='error'>INSTALL ERROR</H1>
					<p>Pleas install <strong>extraExt</strong> for correct work</p>
				");
			}
		}
	}
