{"version":3,"names":[],"mappings":"","sources":["assets/components/clientconfig/js/mgr/extras/colorpicker/colorpicker.js"],"sourcesContent":["/**\n * @class Ext.ux.ColorPicker\n * @extends Ext.BoxComponent\n * This is a color picker.\n * @license: LGPLv3\n * @author: Amon\n * @constructor\n * Creates a new ColorPicker\n * @param {Object} config Configuration options\n * @version 1.1.2\n */\n\nExt.namespace( 'Ext.ux' );\n/**\n *\n */\nExt.ux.ColorPicker = Ext.extend( Ext.BoxComponent, {\n\t/**\n\t *\n\t */\n\tinitComponent: function() {\n\t\tthis.applyDefaultsCP();\n\t\tExt.ux.ColorPicker.superclass.initComponent.apply( this, arguments );\n\t\tthis.addEvents('select');\n\t},\n\t/**\n\t *\n\t */\n\tonRender: function() {\n\t\tExt.ux.ColorPicker.superclass.onRender.apply( this, arguments );\n\t\t// check if container, self-container or renderTo exists\n\t\tthis.body = this.body || ( this.container || ( this.renderTo || Ext.DomHelper.append( Ext.getBody(), {}, true ) ) );\n\t\tif( !this.el ) {\n\t\t\tthis.el = this.body;\n\t\t\tif( this.cls ) { Ext.get( this.el ).addClass( this.cls ); }\n\t\t}\n\t\t// render this component\n\t\tthis.renderComponent();\n\t},\n\t/**\n\t *\n\t */\n\tapplyDefaultsCP: function() {\n\t\tExt.apply( this, {\n\t\t\t'cls': 'x-cp-mainpanel',\n\t\t\t'resizable': this.resizable || false,\n\t\t\t'HSV': {\n\t\t\t\th: 0,\n\t\t\t\ts: 0,\n\t\t\t\tv: 0\n\t\t\t},\n\t\t\tupdateMode: null\n\t\t});\n\t},\n\t/**\n\t *\n\t */\n\trenderComponent: function() {\n\t\t// create RGB Slider\n\t\tExt.DomHelper.append( this.body, {\n\t\t\t'id': this.cpGetId( 'rgb' ),\n\t\t\t'cls': 'x-cp-rgbpicker'\n\t\t});\n\t\t// Create HUE Slider\n\t\tExt.DomHelper.append( this.body, {\n\t\t\t'id': this.cpGetId( 'hue' ),\n\t\t\t'cls': 'x-cp-huepicker'\n\t\t});\n\t\t// Initialize HUE Picker DD\n\t\tthis.huePicker = Ext.DomHelper.append( this.body, { 'cls': 'x-cp-hueslider' });\n\t\tthis.hueDD = new Ext.dd.DD( this.huePicker, 'huePicker' );\n\t\tthis.hueDD.constrainTo( this.cpGetId( 'hue' ), {'top':-7,'right':-3,'bottom':-7,'left':-3} );\n\t\tthis.hueDD.onDrag = this.moveHuePicker.createDelegate( this );\n\t\t// initialize onclick on the rgb picker\n\t\tExt.get( this.cpGetId( 'hue' ) ).on( 'mousedown', this.clickHUEPicker.createDelegate( this ) );\n\t\t// initialize start position\n\t\tExt.get( this.huePicker ).moveTo( Ext.get( this.cpGetId( 'hue' ) ).getLeft() - 3, Ext.get( this.cpGetId( 'hue' ) ).getTop() - 7 );\n\t\t// Initialize RGB Picker DD\n\t\tthis.rgbPicker = Ext.DomHelper.append( this.body, { 'cls': 'x-cp-rgbslider' });\n\t\tthis.rgbDD = new Ext.dd.DD( this.rgbPicker, 'rgbPicker' );\n\t\tthis.rgbDD.constrainTo( this.cpGetId( 'rgb' ), -7 );\n\t\tthis.rgbDD.onDrag = this.moveRGBPicker.createDelegate( this );\n\t\t// initialize onclick on the rgb picker\n\t\tExt.get( this.cpGetId( 'rgb' ) ).on( 'mousedown', this.clickRGBPicker.createDelegate( this ) );\n\t\t// initialize start position\n\t\tExt.get( this.rgbPicker ).moveTo( Ext.get( this.cpGetId( 'rgb' ) ).getLeft() - 7, Ext.get( this.cpGetId( 'rgb' ) ).getTop() - 7 );\n\t\t// Create color divs and Form elements\n\t\tthis.formPanel = new Ext.form.FormPanel({\n\t\t\t'renderTo': Ext.DomHelper.append( this.body, {\n\t\t\t\t\t\t\t'id': this.cpGetId( 'fCont' ),\n\t\t\t\t\t\t\t'cls': 'x-cp-formcontainer'\n\t\t\t\t\t\t}, true ),\n\t\t\t'frame': true,\n\t\t\t'labelAlign': 'left',\n\t\t\t'labelWidth': 10,\n\t\t\t'forceLayout': true,\n\t\t\t'items': [{\n\t\t\t\t'layout': 'column',\n\t\t\t\t'items': [{\n\t\t\t\t\t'columnWidth': .5,\n\t\t\t\t\t'layout': 'form',\n\t\t\t\t\t'defaultType': 'numberfield',\n\t\t\t\t\t'defaults': {\n\t\t\t\t\t\t'width': 30,\n\t\t\t\t\t\t'value': 0,\n\t\t\t\t\t\t'minValue': 0,\n\t\t\t\t\t\t'maxValue': 255,\n\t\t\t\t\t\t'allowBlank': false,\n\t\t\t\t\t\t'labelSeparator': ''\n\t\t\t\t\t},\n\t\t\t\t\t'items': [{\n\t\t\t\t\t\t'fieldLabel': 'R',\n\t\t\t\t\t\t'id': this.cpGetId( 'iRed' )\n\t\t\t\t\t},{\n\t\t\t\t\t\t'fieldLabel': 'G',\n\t\t\t\t\t\t'id': this.cpGetId( 'iGreen' )\n\t\t\t\t\t},{\n\t\t\t\t\t\t'fieldLabel': 'B',\n\t\t\t\t\t\t'id': this.cpGetId( 'iBlue' )\n\t\t\t\t\t}]\n\t\t\t\t},{\n\t\t\t\t\t'columnWidth': .5,\n\t\t\t\t\t'layout': 'form',\n\t\t\t\t\t'defaultType': 'numberfield',\n\t\t\t\t\t'defaults': {\n\t\t\t\t\t\t'width': 30,\n\t\t\t\t\t\t'value': 0,\n\t\t\t\t\t\t'minValue': 0,\n\t\t\t\t\t\t'maxValue': 255,\n\t\t\t\t\t\t'allowBlank': false,\n\t\t\t\t\t\t'labelSeparator': ''\n\t\t\t\t\t},\n\t\t\t\t\t'items': [{\n\t\t\t\t\t\t'fieldLabel': 'H',\n\t\t\t\t\t\t'maxValue': 360,\n\t\t\t\t\t\t'id': this.cpGetId( 'iHue' )\n\t\t\t\t\t},{\n\t\t\t\t\t\t'fieldLabel': 'S',\n\t\t\t\t\t\t'id': this.cpGetId( 'iSat' )\n\t\t\t\t\t},{\n\t\t\t\t\t\t'fieldLabel': 'V',\n\t\t\t\t\t\t'id': this.cpGetId( 'iVal' )\n\t\t\t\t\t}]\n\t\t\t\t}]\n\t\t\t},{\n\t\t\t\t'layout': 'form',\n\t\t\t\t'defaultType': 'textfield',\n\t\t\t\t'labelAlign': 'left',\n\t\t\t\t'defaults': {\n\t\t\t\t\t'width': 82,\n\t\t\t\t\t'value': '000000',\n\t\t\t\t\t'labelSeparator': '',\n\t\t\t\t\t'allowBlank': false\n\t\t\t\t},\n\t\t\t\t'id': this.cpGetId( 'cCont' ),\n\t\t\t\t'items': [{\n\t\t\t\t\t'fieldLabel': '#',\n\t\t\t\t\t'id': this.cpGetId( 'iHexa' ),\n\t\t\t\t\t'value': '000000'\n\t\t\t\t}]\n\t\t\t}]\n\t\t});\n\t\tExt.getCmp( this.cpGetId( 'iRed' ) ).on( 'change', this.updateFromIRGB.createDelegate( this ) );\n\t\tExt.getCmp( this.cpGetId( 'iGreen' ) ).on( 'change', this.updateFromIRGB.createDelegate( this ) );\n\t\tExt.getCmp( this.cpGetId( 'iBlue' ) ).on( 'change', this.updateFromIRGB.createDelegate( this ) );\n\t\tExt.getCmp( this.cpGetId( 'iHue' ) ).on( 'change', this.updateFromIHSV.createDelegate( this ) );\n\t\tExt.getCmp( this.cpGetId( 'iSat' ) ).on( 'change', this.updateFromIHSV.createDelegate( this ) );\n\t\tExt.getCmp( this.cpGetId( 'iVal' ) ).on( 'change', this.updateFromIHSV.createDelegate( this ) );\n\t\tExt.getCmp( this.cpGetId( 'iHexa' ) ).on( 'change', this.updateFromIHexa.createDelegate( this ) );\n\t\tExt.DomHelper.append( this.cpGetId( 'cCont' ), { 'cls': 'x-cp-colorbox', 'id': this.cpGetId( 'cWebSafe' ) }, true ).update( 'Websafe' );\n\t\tExt.DomHelper.append( this.cpGetId( 'cCont' ), { 'cls': 'x-cp-colorbox', 'id': this.cpGetId( 'cInverse' ) }, true ).update( 'Inverse' );\n\t\tExt.DomHelper.append( this.cpGetId( 'cCont' ), { 'cls': 'x-cp-colorbox', 'id': this.cpGetId( 'cColor' ) }, true ).update( 'Pick Color' );\n\t\tExt.get( this.cpGetId( 'cWebSafe' ) ).on( 'click', this.updateFromBox.createDelegate( this ) );\n\t\tExt.get( this.cpGetId( 'cInverse' ) ).on( 'click', this.updateFromBox.createDelegate( this ) );\n\t\tExt.get( this.cpGetId( 'cColor' ) ).on( 'click', this.selectColor.createDelegate( this ) );\n\t\tExt.DomHelper.append( this.body, {'tag':'br','cls':'x-cp-clearfloat'});\n\t},\n\t/**\n\t *\n\t */\n\tcpGetId: function( postfix ) {\n\t\treturn this.getId() + '__' + ( postfix || 'cp' );\n\t},\n\t/**\n\t *\n\t */\n\tupdateRGBPosition: function( x, y ) {\n\t\tthis.updateMode = 'click';\n\t\tx = x < 0 ? 0 : x;\n\t\tx = x > 181 ? 181 : x;\n\t\ty = y < 0 ? 0 : y;\n\t\ty = y > 181 ? 181 : y;\n\t\tthis.HSV.s = this.getSaturation( x );\n\t\tthis.HSV.v = this.getValue( y );\n\t\tExt.get( this.rgbPicker ).moveTo( Ext.get( this.cpGetId( 'rgb' ) ).getLeft() + x - 7, Ext.get( this.cpGetId( 'rgb' ) ).getTop() + y - 7, ( this.animateMove || true ) );\n\t\tthis.updateColor();\n\t},\n\t/**\n\t *\n\t */\n\tupdateHUEPosition: function( y ) {\n\t\tthis.updateMode = 'click';\n\t\ty = y < 1 ? 1 : y;\n\t\ty = y > 181 ? 181 : y;\n\t\tthis.HSV.h = Math.round( 360 / 181 * ( 181 - y ) );\n\t\tExt.get( this.huePicker ).moveTo( Ext.get( this.huePicker ).getLeft(), Ext.get( this.cpGetId( 'hue' ) ).getTop() + y - 7, ( this.animateMove || true ) );\n\t\tthis.updateRGBPicker( this.HSV.h );\n\t\tthis.updateColor();\n\t},\n\t/**\n\t *\n\t */\n\tclickRGBPicker: function( event, element ) {\n\t\tthis.updateRGBPosition( event.xy[0] - Ext.get( this.cpGetId( 'rgb' ) ).getLeft() , event.xy[1] - Ext.get( this.cpGetId( 'rgb' ) ).getTop() );\n\t},\n\t/**\n\t *\n\t */\n\tclickHUEPicker: function( event, element ) {\n\t\tthis.updateHUEPosition( event.xy[1] - Ext.get( this.cpGetId( 'hue' ) ).getTop() );\n\t},\n\t/**\n\t *\n\t */\n\tmoveRGBPicker: function( event ) {\n\t\tthis.rgbDD.constrainTo( this.cpGetId( 'rgb' ), -7 );\n\t\tthis.updateRGBPosition( Ext.get( this.rgbPicker ).getLeft() - Ext.get( this.cpGetId( 'rgb' ) ).getLeft() + 7 , Ext.get( this.rgbPicker ).getTop() - Ext.get( this.cpGetId( 'rgb' ) ).getTop() + 7 );\n\t},\n\t/**\n\t *\n\t */\n\tmoveHuePicker: function( event ) {\n\t\tthis.hueDD.constrainTo( this.cpGetId( 'hue' ), {'top':-7,'right':-3,'bottom':-7,'left':-3} );\n\t\tthis.updateHUEPosition( Ext.get( this.huePicker ).getTop() - Ext.get( this.cpGetId( 'hue' ) ).getTop() + 7 );\n\t},\n\t/**\n\t *\n\t */\n\tupdateRGBPicker: function( newValue ) {\n\t\tthis.updateMode = 'click';\n\t\tExt.get( this.cpGetId( 'rgb' ) ).setStyle({ 'background-color': '#' + this.rgbToHex( this.hsvToRgb( newValue, 1, 1 ) ) });\n\t\tthis.updateColor();\n\t},\n\t/**\n\t *\n\t */\n\tupdateColor: function() {\n\t\tvar rgb = this.hsvToRgb( this.HSV.h, this.HSV.s, this.HSV.v );\n\t\tvar websafe = this.websafe( rgb );\n\t\tvar invert = this.invert( rgb );\n\t\tvar wsInvert = this.invert( websafe );\n\t\tif( this.updateMode !== 'hexa' ) {\n\t\t\tExt.getCmp( this.cpGetId( 'iHexa' ) ).setValue( this.rgbToHex( rgb ) );\n\t\t}\n\t\tif( this.updateMode !== 'rgb' ) {\n\t\t\tExt.getCmp( this.cpGetId( 'iRed' ) ).setValue( rgb[0] );\n\t\t\tExt.getCmp( this.cpGetId( 'iGreen' ) ).setValue( rgb[1] );\n\t\t\tExt.getCmp( this.cpGetId( 'iBlue' ) ).setValue( rgb[2] );\n\t\t}\n\t\tif( this.updateMode !== 'hsv' ) {\n\t\t\tExt.getCmp( this.cpGetId( 'iHue' ) ).setValue( Math.round( this.HSV.h ) );\n\t\t\tExt.getCmp( this.cpGetId( 'iSat' ) ).setValue( Math.round( this.HSV.s * 100 ) );\n\t\t\tExt.getCmp( this.cpGetId( 'iVal' ) ).setValue( Math.round( this.HSV.v * 100 ) );\n\t\t}\n\t\tExt.get( this.cpGetId( 'cColor' ) ).setStyle({\n\t\t\t'background': '#' + this.rgbToHex( rgb ),\n\t\t\t'color': '#' + this.rgbToHex( invert )\n\t\t});\n\t\tExt.getDom( this.cpGetId( 'cColor' ) ).title = '#'+this.rgbToHex( rgb );\n\t\tExt.get( this.cpGetId( 'cInverse' ) ).setStyle({\n\t\t\t'background': '#' + this.rgbToHex( invert ),\n\t\t\t'color': '#' + this.rgbToHex( rgb )\n\t\t});\n\t\tExt.getDom( this.cpGetId( 'cInverse' ) ).title = '#'+this.rgbToHex( invert );\n\t\tExt.get( this.cpGetId( 'cWebSafe' ) ).setStyle({\n\t\t\t'background': '#' + this.rgbToHex( websafe ),\n\t\t\t'color': '#' + this.rgbToHex( wsInvert )\n\t\t});\n\t\tExt.getDom( this.cpGetId( 'cWebSafe' ) ).title = '#'+this.rgbToHex( websafe );\n\t\tExt.get( this.huePicker ).moveTo( Ext.get( this.huePicker ).getLeft(), Ext.get( this.cpGetId( 'hue' ) ).getTop() + this.getHPos( Ext.getCmp( this.cpGetId( 'iHue' ) ).getValue() ) - 7, ( this.animateMove || true ) );\n\t\tExt.get( this.rgbPicker ).moveTo( Ext.get( this.cpGetId( 'rgb' ) ).getLeft() + this.getSPos( Ext.getCmp( this.cpGetId( 'iSat' ) ).getValue() / 100 ) - 7, Ext.get( this.cpGetId( 'hue' ) ).getTop() + this.getVPos( Ext.getCmp( this.cpGetId( 'iVal' ) ).getValue() / 100 ) - 7, ( this.animateMove || true ) );\n\t\tExt.get( this.cpGetId( 'rgb' ) ).setStyle({ 'background-color': '#' + this.rgbToHex( this.hsvToRgb( Ext.getCmp( this.cpGetId( 'iHue' ) ).getValue(), 1, 1 ) ) });\n\t},\n\t/**\n\t *\n\t */\n\tsetColor: function(c) {\n\t\tif(!/^[0-9a-fA-F]{6}$/.test(c))return;\n\t\tExt.getCmp( this.cpGetId( 'iHexa' ) ).setValue(c);\n\t\tthis.updateFromIHexa();\n\t},\n\t/**\n\t *\n\t */\n\tupdateFromIRGB: function( input, newValue, oldValue ) {\n\t\tthis.updateMode = 'rgb';\n\t\tvar temp = this.rgbToHsv( Ext.getCmp( this.cpGetId( 'iRed' ) ).getValue(), Ext.getCmp( this.cpGetId( 'iGreen' ) ).getValue(), Ext.getCmp( this.cpGetId( 'iBlue' ) ).getValue() );\n\t\tthis.HSV = { h: temp[0], s:temp[1], v:temp[2]};\n\t\tthis.updateColor();\n\t},\n\t/**\n\t *\n\t */\n\tupdateFromIHSV: function( input, newValue, oldValue ) {\n\t\tthis.updateMode = 'hsv';\n\t\tthis.HSV = { h: Ext.getCmp( this.cpGetId( 'iHue' ) ).getValue(), s:Ext.getCmp( this.cpGetId( 'iSat' ) ).getValue() / 100, v:Ext.getCmp( this.cpGetId( 'iVal' ) ).getValue() / 100};\n\t\tthis.updateColor();\n\t},\n\t/**\n\t *\n\t */\n\tupdateFromIHexa: function( input, newValue, oldValue ) {\n\t\tthis.updateMode = 'hexa';\n\t\tvar temp = this.rgbToHsv( this.hexToRgb( Ext.getCmp( this.cpGetId( 'iHexa' ) ).getValue() ) );\n\t\tthis.HSV = { h: temp[0], s:temp[1], v:temp[2]};\n\t\tthis.updateColor();\n\t},\n\t/**\n\t *\n\t */\n\tupdateFromBox: function( event, element ) {\n\t\tthis.updateMode = 'click';\n\t\tvar temp = this.rgbToHsv( this.hexToRgb( Ext.get( element ).getColor( 'backgroundColor', '', '' ) ) );\n\t\tthis.HSV = { h: temp[0], s:temp[1], v:temp[2]};\n\t\tthis.updateColor();\n\t},\n\n\tselectColor: function( event, element ) {\n\t\tthis.fireEvent('select', this, Ext.get( element ).getColor( 'backgroundColor', '', '' ));\n\t},\n\t/**\n\t * Convert HSV color format to RGB color format\n\t * @param {Integer/Array( h, s, v )} h\n\t * @param {Integer} s (optional)\n\t * @param {Integer} v (optional)\n\t * @return {Array}\n\t */\n\thsvToRgb: function( h, s, v ) {\n\t\tif( h instanceof Array ) { return this.hsvToRgb.call( this, h[0], h[1], h[2] ); }\n\t\tvar r, g, b, i, f, p, q, t;\n\t    i = Math.floor( ( h / 60 ) % 6 );\n\t    f = ( h / 60 ) - i;\n\t    p = v * ( 1 - s );\n\t    q = v * ( 1 - f * s );\n\t    t = v * ( 1 - ( 1 - f ) * s );\n\t    switch(i) {\n\t        case 0: r=v; g=t; b=p; break;\n\t        case 1: r=q; g=v; b=p; break;\n\t        case 2: r=p; g=v; b=t; break;\n\t        case 3: r=p; g=q; b=v; break;\n\t        case 4: r=t; g=p; b=v; break;\n\t        case 5: r=v; g=p; b=q; break;\n\t    }\n\t    return [this.realToDec( r ), this.realToDec( g ), this.realToDec( b )];\n\t},\n\t/**\n\t * Convert RGB color format to HSV color format\n\t * @param {Integer/Array( r, g, b )} r\n\t * @param {Integer} g (optional)\n\t * @param {Integer} b (optional)\n\t * @return {Array}\n\t */\n\trgbToHsv: function( r, g, b ) {\n\t\tif( r instanceof Array ) { return this.rgbToHsv.call( this, r[0], r[1], r[2] ); }\n        r = r / 255;\n        g = g / 255;\n        b = b / 255;\n        var min, max, delta, h, s, v;\n        min = Math.min( Math.min( r, g ), b );\n        max = Math.max( Math.max( r, g ), b );\n        delta = max - min;\n        switch (max) {\n            case min: h = 0; break;\n            case r:   h = 60 * ( g - b ) / delta;\n                      if ( g < b ) { h += 360; }\n                      break;\n            case g:   h = ( 60 * ( b - r ) / delta ) + 120; break;\n            case b:   h = ( 60 * ( r - g ) / delta ) + 240; break;\n        }\n        s = ( max === 0 ) ? 0 : 1 - ( min / max );\n        return [Math.round( h ), s, max];\n\t},\n\t/**\n\t * Convert a float to decimal\n\t * @param {Float} n\n\t * @return {Integer}\n\t */\n\trealToDec: function( n ) {\n\t\treturn Math.min( 255, Math.round( n * 256 ) );\n\t},\n\t/**\n\t * Convert RGB color format to Hexa color format\n\t * @param {Integer/Array( r, g, b )} r\n\t * @param {Integer} g (optional)\n\t * @param {Integer} b (optional)\n\t * @return {String}\n\t */\n\trgbToHex: function( r, g, b ) {\n\t\tif( r instanceof Array ) { return this.rgbToHex.call( this, r[0], r[1], r[2] ); }\n\t\treturn this.decToHex( r ) + this.decToHex( g ) + this.decToHex( b );\n\t},\n\t/**\n\t * Convert an integer to hexa\n\t * @param {Integer} n\n\t * @return {String}\n\t */\n\tdecToHex: function( n ) {\n\t\tvar HCHARS = '0123456789ABCDEF';\n        n = parseInt(n, 10);\n        n = ( !isNaN( n )) ? n : 0;\n        n = (n > 255 || n < 0) ? 0 : n;\n        return HCHARS.charAt( ( n - n % 16 ) / 16 ) + HCHARS.charAt( n % 16 );\n\t},\n\t/**\n\t * Return with position of a character in this.HCHARS string\n\t * @private\n\t * @param {Char} c\n\t * @return {Integer}\n\t */\n\tgetHCharPos: function( c ) {\n\t\tvar HCHARS = '0123456789ABCDEF';\n\t\treturn HCHARS.indexOf( c.toUpperCase() );\n\t},\n\t/**\n\t * Convert a hexa string to decimal\n\t * @param {String} hex\n\t * @return {Integer}\n\t */\n\thexToDec: function( hex ) {\n        var s = hex.split('');\n        return ( ( this.getHCharPos( s[0] ) * 16 ) + this.getHCharPos( s[1] ) );\n\t},\n\t/**\n\t * Convert a hexa string to RGB color format\n\t * @param {String} hex\n\t * @return {Array}\n\t */\n\thexToRgb: function( hex ) {\n\t\treturn [ this.hexToDec( hex.substr(0, 2) ), this.hexToDec( hex.substr(2, 2) ), this.hexToDec( hex.substr(4, 2) ) ];\n\t},\n\t/**\n\t * Convert Y coordinate to HUE value\n\t * @private\n\t * @param {Integer} y\n\t * @return {Integer}\n\t */\n\tgetHue: function( y ) {\n\t\tvar hue = 360 - Math.round( ( ( 181 - y ) / 181 ) * 360 );\n\t\treturn hue === 360 ? 0 : hue;\n\t},\n\t/**\n\t * Convert HUE value to Y coordinate\n\t * @private\n\t * @param {Integer} hue\n\t * @return {Integer}\n\t */\n\tgetHPos: function( hue ) {\n\t\treturn 181 - hue * ( 181 / 360 );\n\t},\n\t/**\n\t * Convert X coordinate to Saturation value\n\t * @private\n\t * @param {Integer} x\n\t * @return {Integer}\n\t */\n\tgetSaturation: function( x ) {\n\t\treturn x / 181;\n\t},\n\t/**\n\t * Convert Saturation value to Y coordinate\n\t * @private\n\t * @param {Integer} saturation\n\t * @return {Integer}\n\t */\n\tgetSPos: function( saturation ) {\n\t\treturn saturation * 181;\n\t},\n\t/**\n\t * Convert Y coordinate to Brightness value\n\t * @private\n\t * @param {Integer} y\n\t * @return {Integer}\n\t */\n\tgetValue: function( y ) {\n\t\treturn ( 181 - y ) / 181;\n\t},\n\t/**\n\t * Convert Brightness value to Y coordinate\n\t * @private\n\t * @param {Integer} value\n\t * @return {Integer}\n\t */\n\tgetVPos: function( value ) {\n\t\treturn 181 - ( value * 181 );\n\t},\n\t/**\n\t * Not documented yet\n\t */\n\tcheckSafeNumber: function( v ) {\n\t    if ( !isNaN( v ) ) {\n\t        v = Math.min( Math.max( 0, v ), 255 );\n\t        var i, next;\n\t        for( i=0; i<256; i=i+51 ) {\n\t            next = i + 51;\n\t            if ( v>=i && v<=next ) { return ( v - i > 25 ) ? next : i; }\n\t        }\n\t    }\n\t    return v;\n\t},\n\t/**\n\t * Not documented yet\n\t */\n\twebsafe: function( r, g, b ) {\n\t\tif( r instanceof Array ) { return this.websafe.call( this, r[0], r[1], r[2] ); }\n\t\treturn [this.checkSafeNumber( r ), this.checkSafeNumber( g ), this.checkSafeNumber( b )];\n\t},\n\t/**\n\t * Not documented yet\n\t */\n\tinvert: function( r, g, b ) {\n\t\tif( r instanceof Array ) { return this.invert.call( this, r[0], r[1], r[2] ); }\n\t\treturn [255-r,255-g,255-b];\n\t}\n});\n/**\n *\n */\nExt.ux.ColorDialog = Ext.extend( Ext.Window, {\n\tinitComponent: function() {\n\t\tthis.width = ( !this.width || this.width < 353 ) ? 353 : this.width;\n\t\tthis.applyDefaultsCP();\n\t\tExt.ux.ColorDialog.superclass.initComponent.apply( this, arguments );\n\t},\n\tonRender: function() {\n\t\tExt.ux.ColorDialog.superclass.onRender.apply( this, arguments );\n\t\tthis.renderComponent();\n\t}\n});\nExt.applyIf( Ext.ux.ColorDialog.prototype, Ext.ux.ColorPicker.prototype );\n/**\n *\n */\nExt.ux.ColorPanel = Ext.extend( Ext.Panel, {\n\tinitComponent: function() {\n\t\tthis.width = ( !this.width || this.width < 300 ) ? 300 : this.width;\n\t\tthis.applyDefaultsCP();\n\t\tExt.ux.ColorPanel.superclass.initComponent.apply( this, arguments );\n\t},\n\tonRender: function() {\n\t\tExt.ux.ColorPanel.superclass.onRender.apply( this, arguments );\n\t\tthis.renderComponent();\n\t}\n});\nExt.applyIf( Ext.ux.ColorPanel.prototype, Ext.ux.ColorPicker.prototype );\n/**\n * Register Color* for Lazy Rendering\n */\nExt.reg( 'colorpicker', Ext.ux.ColorPicker );\nExt.reg( 'colordialog', Ext.ux.ColorDialog );\nExt.reg( 'colorpanel', Ext.ux.ColorPanel );\n\n"],"file":"colorpicker.js"}